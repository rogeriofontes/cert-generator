package config

import (
	"fmt"
	"log"
	"os"

	"github.com/joho/godotenv"
	"github.com/rogeriofontes/cert-generator/internal/domain"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

var DB *gorm.DB

// Config cont√©m todas as configura√ß√µes da aplica√ß√£o
type Config struct {
	DatabaseDSN    string
	SMTPUser       string
	SMTPPass       string
	OutputDir      string
	BackgroundPath string
}

// LoadEnv carrega vari√°veis de ambiente do arquivo .env
func LoadEnv() {
	if err := godotenv.Load(); err != nil {
		fmt.Println("‚ö†Ô∏è  Aviso: N√£o foi poss√≠vel carregar o arquivo .env, utilizando vari√°veis de ambiente do sistema.")
	}
}

// LoadConfig carrega as configura√ß√µes do sistema
func LoadConfig() *Config {
	LoadEnv()
	return &Config{
		DatabaseDSN: fmt.Sprintf(
			"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable client_encoding=UTF8",
			getEnv("DB_HOST", "localhost"),
			getEnv("DB_USER", "postgres"),
			getEnv("DB_PASSWORD", "postgres"),
			getEnv("DB_NAME", "certificados"),
			getEnv("DB_PORT", "5432"),
		),
		SMTPUser:       getEnv("SMTP_USER", ""),
		SMTPPass:       getEnv("SMTP_PASS", ""),
		OutputDir:      getEnv("OUTPUT_DIR", "output"),
		BackgroundPath: getEnv("BACKGROUND_PATH", "backgrounds/certificado.jpg"),
	}
}

// InitDB inicializa a conex√£o com o banco de dados
func InitDB() {
	cfg := LoadConfig()

	db, err := gorm.Open(postgres.Open(cfg.DatabaseDSN), &gorm.Config{})
	if err != nil {
		log.Fatalf("‚ùå Erro ao conectar ao banco de dados: %v", err)
	}

	// üîπ Faz a migra√ß√£o autom√°tica das tabelas
	db.AutoMigrate(&domain.Community{}, &domain.Event{}, &domain.Participant{}, &domain.User{})

	// üîπ Garante que o banco use UTF-8 corretamente
	db.Exec("SET client_encoding = 'UTF8'")
	db.Exec("SET NAMES 'UTF8'")
	db.Exec("SET standard_conforming_strings = on")
	db.Exec("SET bytea_output = 'hex'")

	log.Println("‚úÖ Conectado ao banco de dados com sucesso!")
	DB = db
}

// getEnv retorna o valor de uma vari√°vel de ambiente ou um valor padr√£o se n√£o existir
func getEnv(key, defaultValue string) string {
	value, exists := os.LookupEnv(key)
	if !exists {
		return defaultValue
	}
	return value
}
